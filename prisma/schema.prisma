// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tracker {
  id           Int                  @id @default(autoincrement())
  createdAt    DateTime             @default(now())
  owner        User                 @relation(fields: [ownerId], references: [id])
  ownerId      Int
  name         String
  description  String?
  flats        Flat[]
  participants TrackerParticipant[]
}

model User {
  id                    Int                  @id @default(autoincrement())
  email                 String               @unique
  name                  String?
  passwordHash          String
  work_address          String?
  work_latitude         Float?
  work_longitude        Float?
  createdAt             DateTime             @default(now())
  ownedTrackers         Tracker[]
  addedFlats            Flat[]
  trackerParticipations TrackerParticipant[]
  commuteTimes          CommuteTime[]
}

enum FlatStatus {
  Seen
  Visited
  VisitArranged
  Answered
  ReachedOut
  Accepted
}

model Flat {
  id          Int           @id @default(autoincrement())
  tracker     Tracker       @relation(fields: [trackerId], references: [id])
  trackerId   Int
  createdAt   DateTime      @default(now())
  name        String?
  description String?
  price       Float?
  status      FlatStatus
  createdBy   User          @relation(fields: [createdById], references: [id])
  createdById Int
  url         String?
  address     String?
  latitude    Float?
  longitude   Float?
  area        Float?
  bedrooms    Int?
  bathrooms   Int?
  commuteTimes CommuteTime[]
}

model CommuteTime {
  id          Int   @id @default(autoincrement())
  flat        Flat  @relation(fields: [flatId], references: [id], onDelete: Cascade)
  flatId      Int
  user        User  @relation(fields: [userId], references: [id])
  userId      Int
  timeMinutes Int?  // Commute time in minutes
  createdAt   DateTime @default(now())

  @@unique([flatId, userId]) // Each user can only have one commute time per flat
}

enum TrackerParticipantRole {
  Admin
  Participant
}

model TrackerParticipant {
  id        Int                    @id @default(autoincrement())
  tracker   Tracker                @relation(fields: [trackerId], references: [id])
  trackerId Int
  user      User                   @relation(fields: [userId], references: [id])
  userId    Int
  role      TrackerParticipantRole
  createdAt DateTime               @default(now())
}
